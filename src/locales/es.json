{
  "app_title": "ReactQuiz",
  "choose_difficulty": "Elige tu dificultad",
  "beginner": "Principiante",
  "intermediate": "Intermedio",
  "advanced": "Avanzado",
  "code_live": "Código en Vivo",
  "quiz_completed": "¡Cuestionario completado!",
  "skipped": "omitidas",
  "answered_correctly": "respondidas correctamente",
  "answered_incorrectly": "respondidas incorrectamente",
  "skipped_answer": "Omitida",
  "code_live_editor": "Editor de Código en Vivo",
  "output": "Salida:",
  "run_code": "Ejecutar Código",
  "previous": "Anterior",
  "next": "Siguiente",
  "q1_text": "¿Cuál de las siguientes definiciones describe mejor React.js?",
  "q1_answer1": "Una biblioteca para construir interfaces de usuario con código declarativo.",
  "q1_answer2": "Una biblioteca para gestionar el estado en aplicaciones web.",
  "q1_answer3": "Un framework para construir interfaces de usuario con código imperativo.",
  "q1_answer4": "Una biblioteca utilizada solo para construir aplicaciones móviles.",
  "q2_text": "¿Para qué sirven los Hooks de React?",
  "q2_answer1": "Permitir el uso de estado y otras características de React en componentes funcionales.",
  "q2_answer2": "Crear diseños responsivos en aplicaciones React.",
  "q2_answer3": "Manejar errores dentro de la aplicación.",
  "q2_answer4": "Parte de la biblioteca Redux para gestionar el estado global.",
  "q3_text": "¿Puedes identificar qué es JSX?",
  "q3_answer1": "Una extensión de JavaScript que añade sintaxis similar a HTML a JavaScript.",
  "q3_answer2": "Una biblioteca de JavaScript para construir interfaces de usuario dinámicas.",
  "q3_answer3": "Una versión específica de HTML creada explícitamente para React.",
  "q3_answer4": "Una herramienta para hacer solicitudes HTTP en una aplicación React.",
  "q4_text": "¿Qué es React?",
  "q4_answer1": "Una biblioteca JavaScript de front-end.",
  "q4_answer2": "Un framework de servidor",
  "q4_answer3": "Un framework JavaScript de back-end",
  "q4_answer4": "Un sistema de gestión de bases de datos",
  "q5_text": "¿Qué empresa desarrolló ReactJS?",
  "q5_answer1": "Facebook.",
  "q5_answer2": "Google",
  "q5_answer3": "Microsoft",
  "q5_answer4": "Apple",
  "q6_text": "¿Qué es el DOM virtual?",
  "q6_answer1": "Una representación virtual del DOM.",
  "q6_answer2": "Una representación directa del DOM real",
  "q6_answer3": "Una herramienta para depurar aplicaciones React",
  "q6_answer4": "Una forma de estilizar componentes React",
  "q7_text": "¿Cómo se pasan datos a un componente desde fuera?",
  "q7_answer1": "props.",
  "q7_answer2": "setState",
  "q7_answer3": "state",
  "q7_answer4": "getInitialState",
  "q8_text": "¿Cuál es el comando para crear una nueva aplicación React?",
  "q8_answer1": "npx create-react-app my-app",
  "q8_answer2": "npm install create-react-app",
  "q8_answer3": "npm start",
  "q8_answer4": "react new-app",
  "q9_text": "¿Cuáles son los bloques de construcción de una aplicación React?",
  "q9_answer1": "Componentes.",
  "q9_answer2": "Funciones",
  "q9_answer3": "Variables",
  "q9_answer4": "Clases",
  "q10_text": "¿Cuál es el propósito de la función `render()` en React?",
  "q10_answer1": "Renderizar HTML en la página web.",
  "q10_answer2": "Actualizar el estado de un componente",
  "q10_answer3": "Manejar eventos de usuario",
  "q10_answer4": "Obtener datos de una API",
  "q11_text": "¿Cuál es la forma más común de crear un componente en React?",
  "q11_answer1": "Definiendo una función JavaScript que devuelve un valor renderizable.",
  "q11_answer2": "Definiendo una etiqueta HTML personalizada en JavaScript.",
  "q11_answer3": "Creando un archivo con extensión .jsx.",
  "q11_answer4": "Usando la palabra clave \"new\" seguida del nombre del componente.",
  "q12_text": "¿Qué implica el término \"estado de React\"?",
  "q12_answer1": "Un objeto en un componente que contiene valores y puede hacer que el componente se renderice al cambiar.",
  "q12_answer2": "La fase del ciclo de vida en la que se encuentra un componente React.",
  "q12_answer3": "El estado general de una aplicación React, incluyendo todas las props y componentes.",
  "q12_answer4": "Una biblioteca para gestionar el estado global en aplicaciones React.",
  "q13_text": "¿Cuál es la diferencia entre estado y props?",
  "q13_answer1": "Las props son inmutables, el estado es mutable.",
  "q13_answer2": "El estado es inmutable, las props son mutables.",
  "q13_answer3": "Ambos son mutables.",
  "q13_answer4": "Ambos son inmutables.",
  "q14_text": "¿Qué es el renderizado condicional en React?",
  "q14_answer1": "Renderizar diferentes componentes según las condiciones.",
  "q14_answer2": "Renderizar componentes en un orden específico.",
  "q14_answer3": "Renderizar componentes con un estilo específico.",
  "q14_answer4": "Renderizar componentes en el servidor.",
  "q15_text": "¿Cuál es la diferencia entre un componente controlado y uno no controlado?",
  "q15_answer1": "Los componentes controlados son controlados por React, los no controlados por el DOM.",
  "q15_answer2": "Los componentes controlados son controlados por el DOM, los no controlados por React.",
  "q15_answer3": "No hay diferencia.",
  "q15_answer4": "Los componentes controlados son solo para formularios.",
  "q16_text": "¿Qué es el \"prop drilling\" y cómo se puede evitar?",
  "q16_answer1": "Pasar props a través de múltiples niveles, se puede evitar con Context API o Redux.",
  "q16_answer2": "Un problema de rendimiento con las props.",
  "q16_answer3": "Una forma de depurar props.",
  "q16_answer4": "Una nueva característica en React 18.",
  "q17_text": "¿Cuál es el propósito del hook `useEffect`?",
  "q17_answer1": "Realizar efectos secundarios en componentes funcionales.",
  "q17_answer2": "Gestionar el estado en componentes funcionales.",
  "q17_answer3": "Crear hooks personalizados.",
  "q17_answer4": "Reemplazar `useState`.",
  "q18_text": "¿Cuál es la diferencia entre `componentDidMount` y `componentDidUpdate`?",
  "q18_answer1": "`componentDidMount` se ejecuta una vez después del renderizado inicial, `componentDidUpdate` se ejecuta en re-renderizados.",
  "q18_answer2": "`componentDidUpdate` se ejecuta una vez después del renderizado inicial, `componentDidMount` se ejecuta en re-renderizados.",
  "q18_answer3": "Son lo mismo.",
  "q18_answer4": "Son hooks.",
  "q19_text": "¿Qué son los Componentes de Orden Superior (HOCs)?",
  "q19_answer1": "Una función que toma un componente y devuelve un nuevo componente.",
  "q19_answer2": "Un componente que se renderiza en la parte superior del árbol de componentes.",
  "q19_answer3": "Un componente que se utiliza para manejar el enrutamiento.",
  "q19_answer4": "Un componente que se utiliza para gestionar el estado.",
  "q20_text": "¿Qué es la carga diferida (lazy loading) en React?",
  "q20_answer1": "Cargar componentes asincrónicamente cuando son necesarios.",
  "q20_answer2": "Cargar todos los componentes a la vez.",
  "q20_answer3": "Una forma de mejorar el rendimiento reduciendo el tamaño del paquete.",
  "q20_answer4": "Una característica de Redux.",
  "q21_text": "¿Cómo se renderiza típicamente el contenido de una lista en aplicaciones React?",
  "q21_answer1": "Usando el método map() para iterar sobre un array de datos y devolver JSX.",
  "q21_answer2": "Usando el bucle for() para iterar sobre un array de datos y devolver JSX.",
  "q21_answer3": "Usando el método forEach() para iterar sobre un array de datos y devolver JSX.",
  "q21_answer4": "Usando el método loop() para iterar sobre un array de datos y devolver JSX.",
  "q22_text": "¿Qué enfoque NO se puede utilizar para renderizar contenido condicionalmente?",
  "q22_answer1": "Usando la sintaxis de plantilla #if.",
  "q22_answer2": "Usando un operador ternario.",
  "q22_answer3": "Usando el operador &&.",
  "q22_answer4": "Usando una declaración if-else.",
  "q23_text": "¿Cuál es el propósito del hook `useCallback` y en qué se diferencia de `useMemo`?",
  "q23_answer1": "`useCallback` memoriza funciones, `useMemo` memoriza valores.",
  "q23_answer2": "`useMemo` memoriza funciones, `useCallback` memoriza valores.",
  "q23_answer3": "Son lo mismo.",
  "q23_answer4": "Se utilizan para la gestión del estado.",
  "q24_text": "Explica el concepto de \"cierres obsoletos\" (stale closures) en el contexto de los hooks de React, y cómo evitarlos.",
  "q24_answer1": "Un cierre que captura un valor de estado antiguo, se evita usando correctamente los arrays de dependencia.",
  "q24_answer2": "Una característica de los cierres de JavaScript.",
  "q24_answer3": "Una técnica de optimización del rendimiento.",
  "q24_answer4": "Un tipo de error en React.",
  "q25_text": "¿Cuándo usarías `useReducer` en lugar de `useState`?",
  "q25_answer1": "Para lógica de estado compleja o cuando el siguiente estado depende del anterior.",
  "q25_answer2": "Para lógica de estado simple.",
  "q25_answer3": "Son intercambiables.",
  "q25_answer4": "`useReducer` está obsoleto.",
  "q26_text": "¿Cuál es la importancia de la prop `key` en las listas de React, y cuáles son los problemas potenciales de usar un índice de array como clave?",
  "q26_answer1": "Las claves ayudan a identificar elementos, usar el índice como clave puede causar problemas con la reordenación.",
  "q26_answer2": "Las claves no son importantes.",
  "q26_answer3": "El índice es la mejor clave.",
  "q26_answer4": "Las claves son solo para cadenas.",
  "q27_text": "¿Cómo se pueden evitar re-renderizados innecesarios en una aplicación React?",
  "q27_answer1": "Usando `React.memo`, `useMemo`, `useCallback` y `PureComponent`.",
  "q27_answer2": "Evitando el estado.",
  "q27_answer3": "Usando solo componentes funcionales.",
  "q27_answer4": "No es posible.",
  "q28_text": "¿Qué es la división de código (code splitting) y cómo se puede implementar en una aplicación React?",
  "q28_answer1": "Dividir el código en trozos más pequeños, implementado con `React.lazy` y `Suspense`.",
  "q28_answer2": "Una forma de organizar el código.",
  "q28_answer3": "Una característica de webpack.",
  "q28_answer4": "Una forma de escribir CSS en JS.",
  "q29_text": "¿Qué es el \"prop drilling\" y cómo ayuda la Context API a resolver este problema?",
  "q29_answer1": "Pasar props a través de múltiples niveles, la Context API proporciona una mejor forma de compartir datos.",
  "q29_answer2": "Un problema de rendimiento.",
  "q29_answer3": "Una forma de depurar props.",
  "q29_answer4": "Una nueva característica en React 18.",
  "q30_text": "¿Qué son los Componentes de Orden Superior (HOCs) y cuáles son sus casos de uso?",
  "q30_answer1": "Una función que toma un componente y devuelve un nuevo componente, utilizada para reutilizar lógica.",
  "q30_answer2": "Un componente que se renderiza en la parte superior del árbol de componentes.",
  "q30_answer3": "Un componente que se utiliza para manejar el enrutamiento.",
  "q30_answer4": "Un componente que se utiliza para gestionar el estado.",
  "ex1_title": "Ejercicio 1: Eliminar Duplicados",
  "ex1_description": "Dado un array de strings con letras repetidas, devuelve un nuevo array sin ninguna letra repetida.",
  "ex2_title": "Ejercicio 2: Entendiendo el Contexto `this`",
  "ex2_description": "Dado el código proporcionado, modifica solo las dos últimas líneas para imprimir correctamente la propiedad `name` del objeto `cat`.",
  "ex3_title": "Ejercicio 3: Instanciación de Clases y Métodos",
  "ex3_description": "Dada la clase `Person`, crea dos instancias de la clase con diferentes nombres y edades, y luego llama al método `sayHello` en cada instancia."
}